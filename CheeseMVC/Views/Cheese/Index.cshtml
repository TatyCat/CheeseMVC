
@{
    ViewData["Title"] = "Home";
}

<h2 style="color:#00e6e6;">MY CHEESES!!!</h2>
<hr />


@if (ViewBag.CheesesList.Count == 0)
{
    <h3>No Cheeses yet, add some!</h3>

}
@*<!--Vamp: Created a hidden input form with a X as a submit button this form will make a POST request to the Remove route uses the asp-* html helper tags (self descriptive names) the hidden input element type is used to store the value as the Key of the dictionary without showing it to the user. only the X of the submit input element is displayed the code is all put within the form to keep it in-line (this could also be done with CSS) -->*@

@if (ViewBag.CheesesList.Count > 0)
{
    <ul>
        @foreach (KeyValuePair<string, string> cheesedesc in ViewBag.CheesesList)
        {
            <li>
                <!--
                    created a hidden input form with a X as a submit button
                    this form will make a POST request to the Remove route
                    uses the asp-* html helper tags (self descriptive names)
                    the hidden input element type is used to store the value as the Key of the dictionary
                    without showing it to the user. only the X of the submit input element is displayed

                    the code is all put within the form to keep it in-line (this could also be done with CSS)
                 -->
                <form asp-action="Remove" asp-controller="Cheese" method="POST">
                    <input type="hidden" value="@(cheesedesc.Key)" name="name">
                    <input type="submit" value="X">
                    @cheesedesc.Key: @cheesedesc.Value
                </form>
            </li>
        }
    </ul>
}

<a asp-controller="Cheese" asp-action="Add" class="btn btn-default" style="margin-left:1em; padding-left:1.4em; padding-right:1.4em;">Add</a>

@if (ViewBag.CheesesList.Count > 0)
{
    <a asp-controller="Cheese" asp-action="Remove" class="btn btn-default">Delete</a>
}
